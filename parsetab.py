
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'Y\xa6\x06\x9e\xdd\x8b\xd3=\x87\x13\xa49\xa7\x9f\xc9\xed'
    
_lr_action_items = {'DIVIDE':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,25,41,-41,41,41,41,-46,41,41,41,41,-44,41,-37,-38,41,41,41,41,41,41,41,-36,41,41,-45,-48,41,41,-48,41,-44,41,41,41,]),'LGPARA':([0,1,2,9,13,16,22,23,26,27,29,30,35,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,73,74,76,97,100,101,102,114,116,125,128,130,131,136,142,145,],[13,13,13,26,13,26,13,-60,13,13,70,13,-61,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'WA':([3,5,9,15,16,17,18,19,38,59,60,61,64,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,93,96,103,104,105,109,110,111,113,117,120,122,124,129,134,137,144,],[-43,-42,-41,51,-41,56,51,51,51,-53,-54,-46,100,51,51,51,51,-44,-29,-37,-38,-32,51,-30,-33,51,-34,51,-36,-28,-35,56,56,-67,-68,-45,-48,51,51,-48,51,100,100,-44,56,51,51,51,]),'YEDI':([0,39,57,101,114,128,131,136,145,],[1,1,1,1,1,1,1,1,1,]),'ASSIGNMENT':([9,23,24,25,31,33,35,36,],[29,-60,-63,-64,-62,73,-61,74,]),'LPARA':([0,1,2,9,13,16,21,22,23,26,27,29,30,35,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,73,74,76,97,100,101,102,114,116,125,128,130,131,136,142,145,],[2,2,2,30,2,55,63,2,-60,2,2,2,2,-61,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,1,2,13,22,23,26,27,29,30,35,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,73,74,76,97,100,101,102,114,116,125,128,130,131,136,142,145,],[3,3,3,3,3,-60,3,3,3,3,-61,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'BANDAGARA':([9,],[34,]),'DIYE':([57,95,114,115,126,128,135,136,140,143,],[-56,-59,-56,127,-55,-56,-58,-56,-59,-57,]),'LEKHA':([3,4,5,9,15,16,61,67,68,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,105,109,113,137,],[-43,20,-42,-41,-50,-41,-46,106,-50,-44,-29,-37,-38,-32,-31,-30,-33,-49,-39,-34,-40,-36,-28,-35,-45,-48,-48,-47,]),'RGPARA':([3,5,13,16,37,38,61,66,70,75,76,78,79,80,81,82,83,84,86,87,88,89,90,91,105,108,112,113,137,],[-43,-42,-27,-41,75,-26,-46,105,-27,-44,-27,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,124,-25,-48,-47,]),'JABA':([0,39,57,101,114,128,131,136,145,],[8,8,8,8,8,8,8,8,8,]),'CHHAINA':([3,5,16,61,65,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,113,137,],[-43,-42,-41,-46,104,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,-47,]),'MINUS':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,139,144,],[-43,-42,35,54,-41,54,54,54,-46,54,54,54,54,-44,54,-37,-38,54,54,54,54,54,-34,54,-36,54,-35,-45,-48,54,54,-48,54,-44,54,54,35,54,]),'NABHAE':([3,5,16,18,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,113,137,],[-43,-42,-41,60,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,-47,]),'LE':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,40,-41,40,40,40,-46,40,40,40,40,-44,-29,-37,-38,-32,40,-30,-33,40,-34,40,-36,40,-35,-45,-48,40,40,-48,40,-44,40,40,40,]),'DEKHI':([3,5,16,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,111,113,137,],[-43,-42,-41,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,125,-48,-47,]),'RPARA':([3,5,16,19,30,38,55,61,63,72,75,76,78,79,80,81,82,83,84,86,87,88,89,90,91,92,98,99,105,112,113,119,132,137,],[-43,-42,-41,61,-27,-26,-27,-46,-24,109,-44,-27,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,113,118,-23,-45,-25,-48,-24,-22,-47,]),'POWER':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,42,-41,42,42,42,-46,42,42,42,42,-44,42,-37,-38,42,42,42,42,42,42,42,-36,42,42,-45,-48,42,42,-48,42,-44,42,42,42,]),'KAAM':([0,39,57,101,114,128,131,136,145,],[6,6,6,6,6,6,6,6,6,]),'NEWLINE':([0,3,5,7,11,14,16,17,20,32,34,39,45,57,59,60,61,62,64,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,93,94,96,101,103,104,105,106,107,109,110,113,114,116,118,120,122,123,124,127,128,129,131,133,136,137,141,144,145,147,],[7,-43,-42,-21,-4,39,-41,57,-10,-12,-9,7,-20,7,-53,-54,-46,-11,101,-5,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-52,114,-51,7,-67,-68,-45,-7,-8,-19,-13,-48,7,128,131,-66,-65,-6,-17,-14,7,136,7,-16,7,-47,-18,145,7,-15,]),'QUESTION':([61,],[97,]),'NE':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,44,-41,44,44,44,-46,44,44,44,44,-44,-29,-37,-38,-32,44,-30,-33,44,-34,44,-36,-28,-35,-45,-48,44,44,-48,44,-44,44,44,44,]),'BATA':([9,],[28,]),'LT':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,43,-41,43,43,43,-46,43,43,43,43,-44,-29,-37,-38,-32,43,-30,-33,43,-34,43,-36,43,-35,-45,-48,43,43,-48,43,-44,43,43,43,]),'COLON':([3,5,16,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,113,117,137,],[-43,-42,-41,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,130,-47,]),'RA':([3,5,9,15,16,17,18,19,38,59,60,61,64,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,93,96,103,104,105,109,110,111,113,117,120,122,124,129,134,137,144,],[-43,-42,-41,49,-41,58,49,49,49,-53,-54,-46,102,49,49,49,49,-44,-29,-37,-38,-32,49,-30,-33,49,-34,49,-36,-28,-35,58,58,-67,-68,-45,-48,49,49,-48,49,102,102,-44,58,49,49,49,]),'PLUS':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,139,144,],[-43,-42,23,50,-41,50,50,50,-46,50,50,50,50,-44,50,-37,-38,50,50,50,50,50,-34,50,-36,50,-35,-45,-48,50,50,-48,50,-44,50,50,23,50,]),'IDENTIFIER':([0,1,2,6,10,13,22,23,26,27,28,29,30,35,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,63,70,73,74,76,97,100,101,102,114,116,119,125,128,130,131,136,142,145,],[9,16,16,21,36,16,16,-60,16,16,69,16,16,-61,9,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,9,16,99,16,16,16,16,16,16,9,16,9,16,99,16,9,16,9,9,16,9,]),'SABEI':([0,39,57,101,114,128,131,136,145,],[10,10,10,10,10,10,10,10,10,]),'$end':([0,3,5,7,11,12,14,16,20,32,34,39,45,61,62,71,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,105,106,107,109,110,113,123,124,127,133,137,141,147,],[-3,-43,-42,-21,-4,0,-2,-41,-10,-12,-9,-3,-20,-46,-11,-5,-44,-1,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-7,-8,-19,-13,-48,-6,-17,-14,-16,-47,-18,-15,]),'BHAE':([3,5,16,18,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,113,137,],[-43,-42,-41,59,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,-47,]),'GT':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,47,-41,47,47,47,-46,47,47,47,47,-44,-29,-37,-38,-32,47,-30,-33,47,-34,47,-36,47,-35,-45,-48,47,47,-48,47,-44,47,47,47,]),'STRING':([0,1,2,13,22,23,26,27,29,30,35,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,73,74,76,97,100,101,102,114,116,125,128,130,131,136,142,145,],[5,5,5,5,5,-60,5,5,5,5,-61,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'TIMES':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,24,52,-41,52,52,52,-46,52,52,52,52,-44,52,-37,-38,52,52,52,52,52,52,52,-36,52,52,-45,-48,52,52,-48,52,-44,52,52,52,]),'PATHAU':([3,5,9,15,16,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,113,137,],[-43,-42,-41,45,-41,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,-48,-47,]),'GE':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,46,-41,46,46,46,-46,46,46,46,46,-44,-29,-37,-38,-32,46,-30,-33,46,-34,46,-36,46,-35,-45,-48,46,46,-48,46,-44,46,46,46,]),'BAJA':([101,114,121,126,],[-56,-56,133,-55,]),'MA':([9,],[27,]),'EQ':([3,5,9,15,16,18,19,38,61,65,66,68,71,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,109,110,111,113,117,124,134,137,144,],[-43,-42,-41,53,-41,53,53,53,-46,53,53,53,53,-44,-29,-37,-38,-32,53,-30,-33,53,-34,53,-36,-28,-35,-45,-48,53,53,-48,53,-44,53,53,53,]),'SAMMA':([8,],[22,]),'CHHA':([3,5,16,61,65,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,113,137,],[-43,-42,-41,-46,103,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,-48,-47,]),'SEMICOLON':([3,5,16,20,61,75,78,79,80,81,82,83,84,86,87,88,89,90,91,105,106,113,134,137,],[-43,-42,-41,62,-46,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,-45,123,-48,139,-47,]),'BAISA':([114,126,145,146,],[-56,-55,-56,147,]),'ATHAWA':([57,95,114,126,136,140,],[-56,116,-56,-55,-56,116,]),'MAKA':([114,126,131,138,],[-56,-55,-56,141,]),'LEU':([9,69,],[32,107,]),'COMMA':([3,5,9,15,16,38,61,68,75,78,79,80,81,82,83,84,86,87,88,89,90,91,99,105,109,113,137,],[-43,-42,-41,48,-41,76,-46,48,-44,-29,-37,-38,-32,-31,-30,-33,-39,-34,-40,-36,-28,-35,119,-45,-48,-48,-47,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optelse':([95,140,],[115,143,]),'whilecond':([22,100,102,],[64,120,122,]),'incrementsign':([9,],[33,]),'sign':([9,139,],[31,142,]),'stmt':([0,39,57,101,114,128,131,136,145,],[11,11,94,94,94,94,94,94,94,]),'dynamString':([0,27,39,48,57,101,114,128,131,136,145,],[4,67,4,85,4,4,4,4,4,4,4,]),'cmpdstmt':([57,101,114,128,131,136,145,],[95,121,126,135,138,140,146,]),'variableArgs':([63,119,],[98,132,]),'variableexp':([13,30,55,70,76,],[37,72,92,108,112,]),'exp':([0,1,2,13,22,26,27,29,30,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,73,74,76,97,100,101,102,114,116,125,128,130,131,136,142,145,],[15,18,19,38,65,66,68,71,38,15,78,79,80,81,82,83,84,68,86,87,88,89,90,91,38,18,15,18,38,110,111,38,117,65,15,65,15,18,134,15,137,15,15,144,15,]),'element':([0,39,],[14,14,]),'N':([0,39,],[12,77,]),'condition':([1,56,58,116,],[17,93,96,129,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> N","S'",1,None,None,None),
  ('N -> element NEWLINE N','N',3,'p_N','D:/rhee/NepParser.py',17),
  ('N -> element','N',1,'p_N_lastone','D:/rhee/NepParser.py',20),
  ('N -> <empty>','N',0,'p_N_empty','D:/rhee/NepParser.py',23),
  ('element -> stmt','element',1,'p_element_stmt','D:/rhee/NepParser.py',27),
  ('stmt -> IDENTIFIER ASSIGNMENT exp','stmt',3,'p_stmt_assign','D:/rhee/NepParser.py',30),
  ('stmt -> IDENTIFIER MA dynamString LEKHA SEMICOLON','stmt',5,'p_stmt_filewritewithnewline','D:/rhee/NepParser.py',36),
  ('stmt -> IDENTIFIER MA dynamString LEKHA','stmt',4,'p_stmt_filewrite','D:/rhee/NepParser.py',40),
  ('stmt -> IDENTIFIER BATA IDENTIFIER LEU','stmt',4,'p_stmt_fileread','D:/rhee/NepParser.py',44),
  ('stmt -> IDENTIFIER BANDAGARA','stmt',2,'p_stmt_fileclose','D:/rhee/NepParser.py',48),
  ('stmt -> dynamString LEKHA','stmt',2,'p_stmt_withoutCommaNewline','D:/rhee/NepParser.py',56),
  ('stmt -> dynamString LEKHA SEMICOLON','stmt',3,'p_stmt_WOCommaSameline','D:/rhee/NepParser.py',64),
  ('stmt -> IDENTIFIER LEU','stmt',2,'p_stmt_input','D:/rhee/NepParser.py',68),
  ('stmt -> IDENTIFIER incrementsign ASSIGNMENT exp','stmt',4,'p_stmt_increment','D:/rhee/NepParser.py',72),
  ('stmt -> YEDI condition NEWLINE cmpdstmt optelse DIYE','stmt',6,'p_stmt_ifcondition','D:/rhee/NepParser.py',76),
  ('stmt -> SABEI IDENTIFIER ASSIGNMENT exp DEKHI exp SEMICOLON sign exp NEWLINE cmpdstmt BAISA','stmt',12,'p_stmt_for','D:/rhee/NepParser.py',80),
  ('stmt -> JABA SAMMA whilecond NEWLINE cmpdstmt BAJA','stmt',6,'p_stmt_while','D:/rhee/NepParser.py',84),
  ('stmt -> IDENTIFIER ASSIGNMENT LGPARA variableexp RGPARA','stmt',5,'p_stmt_list','D:/rhee/NepParser.py',88),
  ('stmt -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE cmpdstmt MAKA','stmt',8,'p_stmt_function','D:/rhee/NepParser.py',92),
  ('stmt -> IDENTIFIER LPARA variableexp RPARA','stmt',4,'p_stmt_functionCall','D:/rhee/NepParser.py',96),
  ('stmt -> exp PATHAU','stmt',2,'p_stmt_returnStatement','D:/rhee/NepParser.py',100),
  ('stmt -> NEWLINE','stmt',1,'p_stmt_newline','D:/rhee/NepParser.py',104),
  ('variableArgs -> IDENTIFIER COMMA variableArgs','variableArgs',3,'p_variableArgs_arguments','D:/rhee/NepParser.py',108),
  ('variableArgs -> IDENTIFIER','variableArgs',1,'p_variableArgs_single','D:/rhee/NepParser.py',111),
  ('variableArgs -> <empty>','variableArgs',0,'p_variableArgs_empty','D:/rhee/NepParser.py',114),
  ('variableexp -> exp COMMA variableexp','variableexp',3,'p_variableexp_more','D:/rhee/NepParser.py',118),
  ('variableexp -> exp','variableexp',1,'p_variableexp_one','D:/rhee/NepParser.py',121),
  ('variableexp -> <empty>','variableexp',0,'p_variableexp_empty','D:/rhee/NepParser.py',124),
  ('exp -> exp EQ exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',130),
  ('exp -> exp LE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',131),
  ('exp -> exp GE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',132),
  ('exp -> exp NE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',133),
  ('exp -> exp LT exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',134),
  ('exp -> exp GT exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',135),
  ('exp -> exp PLUS exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',136),
  ('exp -> exp MINUS exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',137),
  ('exp -> exp TIMES exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',138),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',139),
  ('exp -> exp POWER exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',140),
  ('exp -> exp RA exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',141),
  ('exp -> exp WA exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',142),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','D:/rhee/NepParser.py',147),
  ('exp -> STRING','exp',1,'p_exp_string','D:/rhee/NepParser.py',150),
  ('exp -> NUMBER','exp',1,'p_exp_number','D:/rhee/NepParser.py',153),
  ('exp -> LGPARA variableexp RGPARA','exp',3,'p_exp_list','D:/rhee/NepParser.py',156),
  ('exp -> IDENTIFIER LGPARA exp RGPARA','exp',4,'p_exp_listitem','D:/rhee/NepParser.py',159),
  ('exp -> LPARA exp RPARA','exp',3,'p_exp_paren','D:/rhee/NepParser.py',162),
  ('exp -> LPARA exp RPARA QUESTION exp COLON exp','exp',7,'p_exp_conditional','D:/rhee/NepParser.py',166),
  ('exp -> IDENTIFIER LPARA variableexp RPARA','exp',4,'p_exp_functionCall','D:/rhee/NepParser.py',170),
  ('dynamString -> exp COMMA dynamString','dynamString',3,'p_dynamString_ident','D:/rhee/NepParser.py',174),
  ('dynamString -> exp','dynamString',1,'p_dynamString_exp','D:/rhee/NepParser.py',177),
  ('condition -> condition RA condition','condition',3,'p_condition_binop','D:/rhee/NepParser.py',181),
  ('condition -> condition WA condition','condition',3,'p_condition_binop','D:/rhee/NepParser.py',182),
  ('condition -> exp BHAE','condition',2,'p_condition_positive','D:/rhee/NepParser.py',187),
  ('condition -> exp NABHAE','condition',2,'p_condition_neg','D:/rhee/NepParser.py',191),
  ('cmpdstmt -> stmt NEWLINE cmpdstmt','cmpdstmt',3,'p_cmpdstmt_stmt','D:/rhee/NepParser.py',195),
  ('cmpdstmt -> <empty>','cmpdstmt',0,'p_cmpdstmt_empty','D:/rhee/NepParser.py',198),
  ('optelse -> ATHAWA condition NEWLINE cmpdstmt optelse','optelse',5,'p_optelse_elseif','D:/rhee/NepParser.py',202),
  ('optelse -> ATHAWA NEWLINE cmpdstmt','optelse',3,'p_optelse_else','D:/rhee/NepParser.py',205),
  ('optelse -> <empty>','optelse',0,'p_optelse_empty','D:/rhee/NepParser.py',208),
  ('sign -> PLUS','sign',1,'p_sign','D:/rhee/NepParser.py',216),
  ('sign -> MINUS','sign',1,'p_sign','D:/rhee/NepParser.py',217),
  ('incrementsign -> sign','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',221),
  ('incrementsign -> TIMES','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',222),
  ('incrementsign -> DIVIDE','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',223),
  ('whilecond -> whilecond RA whilecond','whilecond',3,'p_whilecond_normal','D:/rhee/NepParser.py',230),
  ('whilecond -> whilecond WA whilecond','whilecond',3,'p_whilecond_normal','D:/rhee/NepParser.py',231),
  ('whilecond -> exp CHHA','whilecond',2,'p_whilecond_pos','D:/rhee/NepParser.py',236),
  ('whilecond -> exp CHHAINA','whilecond',2,'p_whilecond_neg','D:/rhee/NepParser.py',239),
]
