
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xb1\xb1\xd5$O\x97\x1aWf!`\xa5+8r\x11'
    
_lr_action_items = {'DIVIDE':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[38,-52,-54,50,-51,-50,50,-53,50,50,50,50,50,-50,50,-57,-55,50,-45,-46,50,50,50,50,50,50,50,50,-44,50,50,-56,50,-62,50,-62,50,-55,50,-58,50,50,50,]),'LGPARA':([0,1,9,11,15,20,26,28,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,83,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[15,15,28,15,15,28,15,15,78,-75,-74,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,28,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'BATA':([9,],[29,]),'YEDI':([0,48,67,113,129,146,148,155,158,167,],[1,1,1,1,1,1,1,1,1,1,]),'ASSIGNMENT':([9,27,33,35,36,38,40,44,],[30,-77,-75,80,-74,-78,-76,85,]),'LPARA':([0,1,9,11,15,20,25,26,28,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,83,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[11,11,37,11,11,65,72,11,11,11,-75,-74,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,65,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'NUMBER':([0,1,3,11,15,26,28,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[12,12,24,12,12,12,12,12,-75,-74,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'JABA':([0,48,67,113,129,146,148,155,158,167,],[8,8,8,8,8,8,8,8,8,8,]),'COLON':([12,16,19,20,24,28,75,76,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,128,143,151,159,],[-52,-54,-51,-50,-53,-60,117,-59,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,153,-58,-61,]),'LEKHA':([2,9,12,16,18,19,20,24,82,83,84,86,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,118,122,128,151,159,],[23,-50,-52,-54,-64,-51,-50,-53,123,-50,-64,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-63,-48,-42,-49,-44,-36,-43,-56,-62,-62,-58,-61,]),'NABHAE':([12,16,19,20,22,24,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,128,151,159,],[-52,-54,-51,-50,70,-53,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,-58,-61,]),'RGPARA':([12,15,16,19,20,24,46,47,76,78,86,87,88,90,91,92,93,94,95,96,97,99,100,101,102,103,104,117,118,120,127,128,137,138,151,159,],[-52,-35,-54,-51,-50,-53,87,-34,118,-35,-57,-55,-35,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-60,-56,139,-33,-62,151,-59,-58,-61,]),'BANDAGARA':([9,],[32,]),'CHHAINA':([12,16,19,20,24,74,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,128,151,159,],[-52,-54,-51,-50,-53,116,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,-58,-61,]),'MINUS':([0,1,9,11,12,15,16,18,19,20,22,24,26,28,30,33,36,37,41,45,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,78,79,80,83,84,85,86,87,88,90,91,92,93,94,95,96,97,99,100,101,102,103,104,112,113,114,117,118,121,122,124,125,126,128,129,131,138,139,142,143,146,148,151,152,153,155,157,158,159,162,165,167,],[3,3,33,3,-52,3,-54,64,-51,-50,64,-53,3,3,3,-75,-74,3,3,64,64,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,64,64,3,64,3,-50,64,3,-57,-55,3,64,-45,-46,64,64,64,64,64,64,-42,64,-44,64,-43,3,3,3,3,-56,64,-62,3,64,3,-62,3,3,64,-55,3,64,3,3,-58,64,3,3,33,3,64,3,64,3,]),'BAHIRA':([0,48,67,113,129,146,148,155,158,167,],[4,4,4,4,4,4,4,4,4,4,]),'BANAU':([9,],[34,]),'ARKO':([0,48,67,113,129,146,148,155,158,167,],[5,5,5,5,5,5,5,5,5,5,]),'DEKHI':([12,16,19,20,24,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,125,128,151,159,],[-52,-54,-51,-50,-53,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,142,-62,-58,-61,]),'WA':([9,12,16,18,19,20,21,22,24,45,47,69,70,73,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,106,109,115,116,118,121,122,125,128,134,136,138,139,143,147,151,152,159,165,],[-50,-52,-54,61,-51,-50,66,61,-53,61,61,-67,-68,112,61,61,61,-50,61,-57,-55,-37,-45,-46,61,-40,61,-38,-41,61,-42,61,-44,-36,-43,66,66,-81,-82,-56,61,-62,61,-62,112,112,61,-55,61,66,-58,61,61,61,]),'POWER':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,51,-51,-50,51,-53,51,51,51,51,51,-50,51,-57,-55,51,-45,-46,51,51,51,51,51,51,51,51,-44,51,51,-56,51,-62,51,-62,51,-55,51,-58,51,51,51,]),'EQ':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,63,-51,-50,63,-53,63,63,63,63,63,-50,63,-57,-55,-37,-45,-46,63,-40,63,-38,-41,63,-42,63,-44,-36,-43,-56,63,-62,63,-62,63,-55,63,-58,63,63,63,]),'KAAM':([0,48,67,113,129,146,148,155,158,167,],[6,6,6,6,6,6,6,6,6,6,]),'NEWLINE':([0,4,5,7,12,13,16,17,19,20,21,23,24,31,32,34,39,42,43,47,48,55,67,69,70,71,73,79,86,87,88,90,91,92,93,94,95,96,97,99,100,101,102,103,104,106,107,109,113,115,116,118,119,121,122,123,124,127,128,129,131,132,134,136,139,140,141,145,146,147,148,150,151,152,155,158,159,161,165,166,167,169,],[7,-6,-7,-29,-52,-4,-54,48,-51,-50,67,-17,-53,-13,-11,-14,-15,-12,-19,-34,7,-28,7,-67,-68,-18,113,-5,-57,-55,-35,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-66,129,-65,7,-81,-82,-56,-10,-20,-27,-9,-35,-33,-62,7,146,148,-80,-79,-25,-8,-16,-21,7,155,7,-24,-58,158,7,7,-61,-26,167,-23,7,-22,]),'QUESTION':([86,],[126,]),'NE':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,54,-51,-50,54,-53,54,54,54,54,54,-50,54,-57,-55,-37,-45,-46,54,-40,54,-38,-41,54,-42,54,-44,-36,-43,-56,54,-62,54,-62,54,-55,54,-58,54,54,54,]),'DIYE':([67,108,129,130,144,146,154,155,160,164,],[-70,-73,-70,145,-69,-70,-72,-70,-73,-71,]),'LT':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,53,-51,-50,53,-53,53,53,53,53,53,-50,53,-57,-55,-37,-45,-46,53,-40,53,-38,-41,53,-42,53,-44,53,-43,-56,53,-62,53,-62,53,-55,53,-58,53,53,53,]),'COMMA':([9,12,16,18,19,20,24,47,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,111,118,122,128,151,159,],[-50,-52,-54,58,-51,-50,-53,88,-50,58,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,133,-56,-62,-62,-58,-61,]),'RA':([9,12,16,18,19,20,21,22,24,45,47,69,70,73,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,106,109,115,116,118,121,122,125,128,134,136,138,139,143,147,151,152,159,165,],[-50,-52,-54,59,-51,-50,68,59,-53,59,59,-67,-68,114,59,59,59,-50,59,-57,-55,-37,-45,-46,59,-40,59,-38,-41,59,-42,59,-44,-36,-43,68,68,-81,-82,-56,59,-62,59,-62,114,114,59,-55,59,68,-58,59,59,59,]),'PLUS':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,157,159,165,],[36,-52,-54,60,-51,-50,60,-53,60,60,60,60,60,-50,60,-57,-55,60,-45,-46,60,60,60,60,60,60,-42,60,-44,60,-43,-56,60,-62,60,-62,60,-55,60,-58,60,36,60,60,]),'IDENTIFIER':([0,1,6,10,11,15,26,28,29,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,78,80,85,88,112,113,114,117,124,126,129,131,133,142,146,148,153,155,158,162,167,],[9,20,25,44,20,20,20,20,77,20,-75,-74,20,83,9,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,20,111,20,20,20,20,20,9,20,20,20,20,9,20,111,20,9,9,20,9,9,20,9,]),'KORA':([83,],[124,]),'SABEI':([0,48,67,113,129,146,148,155,158,167,],[10,10,10,10,10,10,10,10,10,10,]),'$end':([0,4,5,7,12,13,14,16,17,19,20,23,24,31,32,34,39,42,43,47,48,55,71,79,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,119,121,122,123,124,127,128,139,140,141,145,150,151,159,161,166,169,],[-3,-6,-7,-29,-52,-4,0,-54,-2,-51,-50,-17,-53,-13,-11,-14,-15,-12,-19,-34,-3,-28,-18,-5,-57,-55,-35,-1,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-10,-20,-27,-9,-35,-33,-62,-25,-8,-16,-21,-24,-58,-61,-26,-23,-22,]),'BHAE':([12,16,19,20,22,24,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,128,151,159,],[-52,-54,-51,-50,69,-53,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,-58,-61,]),'GT':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,57,-51,-50,57,-53,57,57,57,57,57,-50,57,-57,-55,-37,-45,-46,57,-40,57,-38,-41,57,-42,57,-44,57,-43,-56,57,-62,57,-62,57,-55,57,-58,57,57,57,]),'STRING':([0,1,11,15,26,28,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[19,19,19,19,19,19,19,-75,-74,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TIMES':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[27,-52,-54,62,-51,-50,62,-53,62,62,62,62,62,-50,62,-57,-55,62,-45,-46,62,62,62,62,62,62,62,62,-44,62,62,-56,62,-62,62,-62,62,-55,62,-58,62,62,62,]),'SUNYA':([0,1,11,15,26,28,30,33,36,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[16,16,16,16,16,16,16,-75,-74,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'GE':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,56,-51,-50,56,-53,56,56,56,56,56,-50,56,-57,-55,-37,-45,-46,56,-40,56,-38,-41,56,-42,56,-44,56,-43,-56,56,-62,56,-62,56,-55,56,-58,56,56,56,]),'LE':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,49,-51,-50,49,-53,49,49,49,49,49,-50,49,-57,-55,-37,-45,-46,49,-40,49,-38,-41,49,-42,49,-44,49,-43,-56,49,-62,49,-62,49,-55,49,-58,49,49,49,]),'METAU':([9,],[39,]),'LUKAU':([9,],[31,]),'CHHA':([12,16,19,20,24,74,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,128,151,159,],[-52,-54,-51,-50,-53,115,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,-58,-61,]),'MODULUS':([9,12,16,18,19,20,22,24,45,47,74,76,79,83,84,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,121,122,125,128,138,139,143,151,152,159,165,],[-50,-52,-54,52,-51,-50,52,-53,52,52,52,52,52,-50,52,-57,-55,-37,-45,-46,52,-40,52,-38,-41,52,-42,52,-44,-36,-43,-56,52,-62,52,-62,52,-55,52,-58,52,52,52,]),'RPARA':([12,16,19,20,24,37,45,47,65,72,81,86,87,88,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,110,111,118,127,128,133,149,151,159,],[-52,-54,-51,-50,-53,-35,86,-34,-35,-32,122,-57,-55,-35,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,128,132,-31,-56,-33,-62,-32,-30,-58,-61,]),'SAMMA':([8,],[26,]),'MA':([9,],[41,]),'SEMICOLON':([12,16,19,20,23,24,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,123,128,151,152,159,],[-52,-54,-51,-50,71,-53,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,140,-62,-58,157,-61,]),'PATHAU':([9,12,16,18,19,20,24,86,87,90,91,92,93,94,95,96,97,99,100,101,102,103,104,118,122,128,151,159,],[-50,-52,-54,55,-51,-50,-53,-57,-55,-37,-45,-46,-47,-40,-39,-38,-41,-48,-42,-49,-44,-36,-43,-56,-62,-62,-58,-61,]),'DEKHAU':([9,],[42,]),'BAJA':([113,129,135,144,],[-70,-70,150,-69,]),'MAKA':([129,144,148,156,],[-70,-69,-70,161,]),'ATHAWA':([67,108,129,144,155,160,],[-70,131,-70,-69,-70,131,]),'LEU':([9,77,],[43,119,]),'BAISA':([129,144,158,163,167,168,],[-70,-69,-70,166,-70,169,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optelse':([108,160,],[130,164,]),'whilecond':([26,112,114,],[73,134,136,]),'sliceexp':([28,117,],[75,137,]),'incrementsign':([9,],[35,]),'sign':([9,157,],[40,162,]),'stmt':([0,48,67,113,129,146,148,155,158,167,],[13,13,107,107,107,107,107,107,107,107,]),'dynamString':([0,41,48,58,67,113,129,146,148,155,158,167,],[2,82,2,98,2,2,2,2,2,2,2,2,]),'cmpdstmt':([67,113,129,146,148,155,158,167,],[108,135,144,154,156,160,163,168,]),'variableArgs':([72,133,],[110,149,]),'variableexp':([15,37,65,78,88,124,],[46,81,105,120,127,141,]),'exp':([0,1,11,15,26,28,30,37,41,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,78,80,85,88,112,113,114,117,124,126,129,131,142,146,148,153,155,158,162,167,],[18,22,45,47,74,76,79,47,84,18,90,91,92,93,94,95,96,97,84,99,100,101,102,103,104,47,22,18,22,47,121,125,47,74,18,74,138,47,143,18,22,152,18,18,159,18,18,165,18,]),'element':([0,48,],[17,17,]),'N':([0,48,],[14,89,]),'condition':([1,66,68,131,],[21,106,109,147,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> N","S'",1,None,None,None),
  ('N -> element NEWLINE N','N',3,'p_N','D:/rhee/NepParser.py',17),
  ('N -> element','N',1,'p_N_lastone','D:/rhee/NepParser.py',20),
  ('N -> <empty>','N',0,'p_N_empty','D:/rhee/NepParser.py',23),
  ('element -> stmt','element',1,'p_element_stmt','D:/rhee/NepParser.py',29),
  ('stmt -> IDENTIFIER ASSIGNMENT exp','stmt',3,'p_stmt_assign','D:/rhee/NepParser.py',33),
  ('stmt -> BAHIRA','stmt',1,'p_stmt_break','D:/rhee/NepParser.py',40),
  ('stmt -> ARKO','stmt',1,'p_stmt_continue','D:/rhee/NepParser.py',44),
  ('stmt -> IDENTIFIER MA dynamString LEKHA SEMICOLON','stmt',5,'p_stmt_filewritewithnewline','D:/rhee/NepParser.py',48),
  ('stmt -> IDENTIFIER MA dynamString LEKHA','stmt',4,'p_stmt_filewrite','D:/rhee/NepParser.py',52),
  ('stmt -> IDENTIFIER BATA IDENTIFIER LEU','stmt',4,'p_stmt_fileread','D:/rhee/NepParser.py',56),
  ('stmt -> IDENTIFIER BANDAGARA','stmt',2,'p_stmt_fileclose','D:/rhee/NepParser.py',60),
  ('stmt -> IDENTIFIER DEKHAU','stmt',2,'p_stmt_graphicshow','D:/rhee/NepParser.py',64),
  ('stmt -> IDENTIFIER LUKAU','stmt',2,'p_stmt_graphichide','D:/rhee/NepParser.py',68),
  ('stmt -> IDENTIFIER BANAU','stmt',2,'p_stmt_graphicupdate','D:/rhee/NepParser.py',72),
  ('stmt -> IDENTIFIER METAU','stmt',2,'p_stmt_graphiclear','D:/rhee/NepParser.py',76),
  ('stmt -> IDENTIFIER MA IDENTIFIER KORA variableexp','stmt',5,'p_stmt_graphicdraw','D:/rhee/NepParser.py',81),
  ('stmt -> dynamString LEKHA','stmt',2,'p_stmt_withoutCommaNewline','D:/rhee/NepParser.py',89),
  ('stmt -> dynamString LEKHA SEMICOLON','stmt',3,'p_stmt_WOCommaSameline','D:/rhee/NepParser.py',97),
  ('stmt -> IDENTIFIER LEU','stmt',2,'p_stmt_input','D:/rhee/NepParser.py',101),
  ('stmt -> IDENTIFIER incrementsign ASSIGNMENT exp','stmt',4,'p_stmt_increment','D:/rhee/NepParser.py',105),
  ('stmt -> YEDI condition NEWLINE cmpdstmt optelse DIYE','stmt',6,'p_stmt_ifcondition','D:/rhee/NepParser.py',109),
  ('stmt -> SABEI IDENTIFIER ASSIGNMENT exp DEKHI exp SEMICOLON sign exp NEWLINE cmpdstmt BAISA','stmt',12,'p_stmt_for','D:/rhee/NepParser.py',113),
  ('stmt -> SABEI IDENTIFIER ASSIGNMENT exp DEKHI exp NEWLINE cmpdstmt BAISA','stmt',9,'p_stmt_for1','D:/rhee/NepParser.py',117),
  ('stmt -> JABA SAMMA whilecond NEWLINE cmpdstmt BAJA','stmt',6,'p_stmt_while','D:/rhee/NepParser.py',121),
  ('stmt -> IDENTIFIER ASSIGNMENT LGPARA variableexp RGPARA','stmt',5,'p_stmt_list','D:/rhee/NepParser.py',125),
  ('stmt -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE cmpdstmt MAKA','stmt',8,'p_stmt_function','D:/rhee/NepParser.py',129),
  ('stmt -> IDENTIFIER LPARA variableexp RPARA','stmt',4,'p_stmt_functionCall','D:/rhee/NepParser.py',133),
  ('stmt -> exp PATHAU','stmt',2,'p_stmt_returnStatement','D:/rhee/NepParser.py',137),
  ('stmt -> NEWLINE','stmt',1,'p_stmt_newline','D:/rhee/NepParser.py',141),
  ('variableArgs -> IDENTIFIER COMMA variableArgs','variableArgs',3,'p_variableArgs_arguments','D:/rhee/NepParser.py',145),
  ('variableArgs -> IDENTIFIER','variableArgs',1,'p_variableArgs_single','D:/rhee/NepParser.py',148),
  ('variableArgs -> <empty>','variableArgs',0,'p_variableArgs_empty','D:/rhee/NepParser.py',151),
  ('variableexp -> exp COMMA variableexp','variableexp',3,'p_variableexp_more','D:/rhee/NepParser.py',155),
  ('variableexp -> exp','variableexp',1,'p_variableexp_one','D:/rhee/NepParser.py',158),
  ('variableexp -> <empty>','variableexp',0,'p_variableexp_empty','D:/rhee/NepParser.py',161),
  ('exp -> exp EQ exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',167),
  ('exp -> exp LE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',168),
  ('exp -> exp GE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',169),
  ('exp -> exp NE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',170),
  ('exp -> exp LT exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',171),
  ('exp -> exp GT exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',172),
  ('exp -> exp PLUS exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',173),
  ('exp -> exp MINUS exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',174),
  ('exp -> exp TIMES exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',175),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',176),
  ('exp -> exp POWER exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',177),
  ('exp -> exp MODULUS exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',178),
  ('exp -> exp RA exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',179),
  ('exp -> exp WA exp','exp',3,'p_exp_equal','D:/rhee/NepParser.py',180),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','D:/rhee/NepParser.py',185),
  ('exp -> STRING','exp',1,'p_exp_string','D:/rhee/NepParser.py',188),
  ('exp -> NUMBER','exp',1,'p_exp_number','D:/rhee/NepParser.py',191),
  ('exp -> MINUS NUMBER','exp',2,'p_exp_minus','D:/rhee/NepParser.py',195),
  ('exp -> SUNYA','exp',1,'p_exp_sunya','D:/rhee/NepParser.py',199),
  ('exp -> LGPARA variableexp RGPARA','exp',3,'p_exp_list','D:/rhee/NepParser.py',202),
  ('exp -> IDENTIFIER LGPARA exp RGPARA','exp',4,'p_exp_listitem','D:/rhee/NepParser.py',205),
  ('exp -> LPARA exp RPARA','exp',3,'p_exp_paren','D:/rhee/NepParser.py',208),
  ('exp -> IDENTIFIER LGPARA sliceexp COLON sliceexp RGPARA','exp',6,'p_exp_slicing','D:/rhee/NepParser.py',212),
  ('sliceexp -> exp','sliceexp',1,'p_sliceexp_var','D:/rhee/NepParser.py',215),
  ('sliceexp -> <empty>','sliceexp',0,'p_sliceexp_empty','D:/rhee/NepParser.py',218),
  ('exp -> LPARA exp RPARA QUESTION exp COLON exp','exp',7,'p_exp_conditional','D:/rhee/NepParser.py',222),
  ('exp -> IDENTIFIER LPARA variableexp RPARA','exp',4,'p_exp_functionCall','D:/rhee/NepParser.py',226),
  ('dynamString -> exp COMMA dynamString','dynamString',3,'p_dynamString_ident','D:/rhee/NepParser.py',230),
  ('dynamString -> exp','dynamString',1,'p_dynamString_exp','D:/rhee/NepParser.py',233),
  ('condition -> condition RA condition','condition',3,'p_condition_binop','D:/rhee/NepParser.py',237),
  ('condition -> condition WA condition','condition',3,'p_condition_binop','D:/rhee/NepParser.py',238),
  ('condition -> exp BHAE','condition',2,'p_condition_positive','D:/rhee/NepParser.py',243),
  ('condition -> exp NABHAE','condition',2,'p_condition_neg','D:/rhee/NepParser.py',247),
  ('cmpdstmt -> stmt NEWLINE cmpdstmt','cmpdstmt',3,'p_cmpdstmt_stmt','D:/rhee/NepParser.py',251),
  ('cmpdstmt -> <empty>','cmpdstmt',0,'p_cmpdstmt_empty','D:/rhee/NepParser.py',254),
  ('optelse -> ATHAWA condition NEWLINE cmpdstmt optelse','optelse',5,'p_optelse_elseif','D:/rhee/NepParser.py',258),
  ('optelse -> ATHAWA NEWLINE cmpdstmt','optelse',3,'p_optelse_else','D:/rhee/NepParser.py',261),
  ('optelse -> <empty>','optelse',0,'p_optelse_empty','D:/rhee/NepParser.py',264),
  ('sign -> PLUS','sign',1,'p_sign','D:/rhee/NepParser.py',272),
  ('sign -> MINUS','sign',1,'p_sign','D:/rhee/NepParser.py',273),
  ('incrementsign -> sign','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',277),
  ('incrementsign -> TIMES','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',278),
  ('incrementsign -> DIVIDE','incrementsign',1,'p_incrementsign','D:/rhee/NepParser.py',279),
  ('whilecond -> whilecond RA whilecond','whilecond',3,'p_whilecond_normal','D:/rhee/NepParser.py',286),
  ('whilecond -> whilecond WA whilecond','whilecond',3,'p_whilecond_normal','D:/rhee/NepParser.py',287),
  ('whilecond -> exp CHHA','whilecond',2,'p_whilecond_pos','D:/rhee/NepParser.py',292),
  ('whilecond -> exp CHHAINA','whilecond',2,'p_whilecond_neg','D:/rhee/NepParser.py',295),
]
