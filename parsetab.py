
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xbf0$5\x13\xd2\xa4\xf1n\xbb\xb1\x93\xf4\x0c\x08n'
    
_lr_action_items = {'DIVIDE':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[42,-55,-57,61,-54,-53,61,61,61,-56,-58,-60,61,61,61,-53,61,61,61,61,-49,61,61,61,61,61,61,-48,-47,61,61,61,42,-65,61,61,-59,-65,61,61,-58,-61,61,61,61,61,61,]),'LGPARA':([0,1,2,3,9,11,21,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,89,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[1,1,1,1,1,32,68,1,1,84,1,-78,-77,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,68,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'HATAU':([11,],[33,]),'BATA':([11,],[34,]),'YEDI':([0,9,49,72,107,120,136,156,159,167,172,180,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'ASSIGNMENT':([11,31,38,40,41,42,44,48,125,148,],[35,-80,-78,87,-77,-81,-79,91,147,164,]),'LPARA':([0,1,2,3,9,11,21,28,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,89,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[3,3,3,3,3,36,69,78,3,3,3,3,-78,-77,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,69,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,1,2,3,5,9,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[13,13,13,13,27,13,13,13,13,13,-78,-77,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'JABA':([0,9,49,72,107,120,136,156,159,167,172,180,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'COLON':([13,16,19,21,27,32,67,68,76,81,82,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,134,135,139,162,168,],[-55,-57,-54,-53,-56,-63,-58,-63,-60,124,-62,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-62,-59,-65,158,-61,-64,]),'LEKHA':([4,11,13,16,18,19,21,27,67,76,88,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,125,128,134,135,162,168,],[26,-53,-55,-57,-67,-54,-53,-56,-58,-60,130,-53,-67,-52,-46,-40,-49,-39,-42,-43,-66,-51,-45,-44,-48,-47,-41,-50,-59,-65,-59,-65,-61,-64,]),'NABHAE':([13,16,19,21,24,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,134,135,162,168,],[-55,-57,-54,-53,75,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-61,-64,]),'CHHAINA':([13,16,19,21,27,67,76,80,93,94,95,96,97,98,99,101,102,103,104,105,106,108,134,135,162,168,],[-55,-57,-54,-53,-56,-58,-60,123,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-61,-64,]),'BANDAGARA':([11,],[37,]),'RGPARA':([1,13,16,19,20,21,22,27,67,70,76,82,84,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,111,124,127,134,135,145,146,162,168,],[-38,-55,-57,-54,67,-53,-37,-56,-58,-38,-60,125,-38,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,134,-36,-63,149,-59,-65,162,-62,-61,-64,]),'MINUS':([0,1,2,3,9,11,13,16,18,19,21,22,24,25,27,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,67,68,69,70,71,72,73,76,80,82,84,85,87,89,90,91,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,116,119,120,121,124,125,128,129,131,132,134,135,136,138,139,146,147,149,152,156,158,159,162,163,164,165,167,168,170,171,172,175,178,180,],[5,5,5,5,5,38,-55,-57,51,-54,-53,51,51,51,-56,5,5,5,5,-78,-77,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-58,5,5,5,5,5,5,-60,51,51,5,51,5,-53,51,5,51,-46,51,-49,51,51,51,51,-45,51,-48,-47,51,5,51,51,5,5,5,5,5,38,-65,51,5,51,-59,-65,5,5,51,51,5,-58,5,5,5,5,-61,51,5,51,5,51,51,38,5,5,51,5,]),'TICHO':([107,133,136,154,],[-73,153,-73,-72,]),'BAHIRA':([0,9,49,72,107,120,136,156,159,167,172,180,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'BANAU':([11,],[39,]),'ARKO':([0,9,49,72,107,120,136,156,159,167,172,180,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'DEKHI':([13,16,19,21,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,132,134,135,162,168,],[-55,-57,-54,-53,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,152,-59,-65,-61,-64,]),'WA':([11,13,16,18,19,21,22,23,24,25,27,67,74,75,76,79,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,112,115,122,123,125,128,129,132,134,135,139,142,144,146,149,157,162,163,165,168,170,178,],[-53,-55,-57,50,-54,-53,50,71,50,50,-56,-58,-70,-71,-60,119,50,50,50,-53,50,50,-46,-40,-49,-39,50,-43,50,-45,-44,-48,-47,-41,50,50,71,71,-84,-85,-59,-65,50,50,-59,-65,50,119,119,50,-58,71,-61,50,50,50,50,50,]),'POWER':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,53,-54,-53,53,53,53,-56,-58,-60,53,53,53,-53,53,53,53,53,-49,53,53,53,53,53,53,-48,-47,53,53,53,-59,-65,53,53,-59,-65,53,53,-58,-61,53,53,53,53,53,]),'EQ':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,54,-54,-53,54,54,54,-56,-58,-60,54,54,54,-53,54,54,-46,-40,-49,-39,54,-43,54,-45,-44,-48,-47,-41,54,54,-59,-65,54,54,-59,-65,54,54,-58,-61,54,54,54,54,54,]),'KAAM':([0,9,49,72,107,120,136,156,159,167,172,180,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'NEWLINE':([0,6,7,9,13,14,16,17,19,21,22,23,26,27,33,37,39,43,46,47,49,63,65,67,70,74,75,76,77,79,85,93,94,95,96,97,98,99,101,102,103,104,105,106,108,111,112,113,115,122,123,126,128,129,130,131,134,135,138,140,142,144,149,150,151,153,155,157,161,162,163,165,168,170,174,178,179,182,],[9,-9,-10,9,-55,-5,-57,49,-54,-53,-37,72,-7,-56,-16,-14,-17,-18,-15,-20,9,-31,107,-58,-38,-70,-71,-60,-8,120,-6,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-36,-69,136,-68,-84,-85,-13,-30,-21,-12,-38,-59,-65,156,159,-83,-82,-28,-11,-19,-25,-23,167,-27,-61,-32,172,-64,-22,-29,180,-26,-24,]),'QUESTION':([76,],[116,]),'NE':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,55,-54,-53,55,55,55,-56,-58,-60,55,55,55,-53,55,55,-46,-40,-49,-39,55,-43,55,-45,-44,-48,-47,-41,55,55,-59,-65,55,55,-59,-65,55,55,-58,-61,55,55,55,55,55,]),'DIYE':([72,114,136,137,154,156,166,167,173,177,],[-73,-76,-73,155,-72,-73,-75,-73,-76,-74,]),'LT':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,56,-54,-53,56,56,56,-56,-58,-60,56,56,56,-53,56,56,-46,-40,-49,56,56,-43,56,-45,-44,-48,-47,-41,56,56,-59,-65,56,56,-59,-65,56,56,-58,-61,56,56,56,56,56,]),'PLUS':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,171,178,],[41,-55,-57,59,-54,-53,59,59,59,-56,-58,-60,59,59,59,-53,59,59,-46,59,-49,59,59,59,59,-45,59,-48,-47,59,59,59,41,-65,59,59,-59,-65,59,59,-58,-61,59,59,59,59,41,59,]),'RA':([11,13,16,18,19,21,22,23,24,25,27,67,74,75,76,79,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,112,115,122,123,125,128,129,132,134,135,139,142,144,146,149,157,162,163,165,168,170,178,],[-53,-55,-57,58,-54,-53,58,73,58,58,-56,-58,-70,-71,-60,121,58,58,58,-53,58,58,-46,-40,-49,-39,58,-43,58,-45,-44,-48,-47,-41,58,58,73,73,-84,-85,-59,-65,58,58,-59,-65,58,121,121,58,-58,73,-61,58,58,58,58,58,]),'COMMA':([11,13,16,18,19,21,22,27,67,76,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,118,125,128,134,135,162,168,],[-53,-55,-57,57,-54,-53,70,-56,-58,-60,-53,57,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,141,-59,-65,-59,-65,-61,-64,]),'IDENTIFIER':([0,1,2,3,8,9,12,30,32,34,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,78,84,87,91,107,116,119,120,121,124,131,136,138,141,147,152,156,158,159,164,167,172,175,180,],[11,21,21,21,28,11,48,21,21,83,21,21,-78,-77,89,11,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,11,21,118,21,21,21,11,21,21,11,21,21,21,11,21,118,21,21,11,21,11,21,11,11,21,11,]),'KORA':([89,],[131,]),'SABEI':([0,9,49,72,107,120,136,156,159,167,172,180,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'$end':([0,6,7,9,13,14,15,16,17,19,21,22,26,27,29,33,37,39,43,46,47,49,63,67,70,76,77,85,92,93,94,95,96,97,98,99,101,102,103,104,105,106,108,111,126,128,129,130,131,134,135,149,150,151,153,155,161,162,163,168,170,174,179,182,],[-4,-9,-10,-4,-55,-5,0,-57,-3,-54,-53,-37,-7,-56,-2,-16,-14,-17,-18,-15,-20,-4,-31,-58,-38,-60,-8,-6,-1,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-36,-13,-30,-21,-12,-38,-59,-65,-28,-11,-19,-25,-23,-27,-61,-32,-64,-22,-29,-26,-24,]),'BHAE':([13,16,19,21,24,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,134,135,162,168,],[-55,-57,-54,-53,74,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-61,-64,]),'GT':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,60,-54,-53,60,60,60,-56,-58,-60,60,60,60,-53,60,60,-46,-40,-49,60,60,-43,60,-45,-44,-48,-47,-41,60,60,-59,-65,60,60,-59,-65,60,60,-58,-61,60,60,60,60,60,]),'STRING':([0,1,2,3,9,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[19,19,19,19,19,19,19,19,19,-78,-77,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TIMES':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[31,-55,-57,62,-54,-53,62,62,62,-56,-58,-60,62,62,62,-53,62,62,62,62,-49,62,62,62,62,62,62,-48,-47,62,62,62,31,-65,62,62,-59,-65,62,62,-58,-61,62,62,62,62,62,]),'SUNYA':([0,1,2,3,9,30,32,35,36,38,41,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[16,16,16,16,16,16,16,16,16,-78,-77,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'GE':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,64,-54,-53,64,64,64,-56,-58,-60,64,64,64,-53,64,64,-46,-40,-49,64,64,-43,64,-45,-44,-48,-47,-41,64,64,-59,-65,64,64,-59,-65,64,64,-58,-61,64,64,64,64,64,]),'LE':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,52,-54,-53,52,52,52,-56,-58,-60,52,52,52,-53,52,52,-46,-40,-49,52,52,-43,52,-45,-44,-48,-47,-41,52,52,-59,-65,52,52,-59,-65,52,52,-58,-61,52,52,52,52,52,]),'METAU':([11,],[43,]),'CHOTI':([11,13,16,18,19,21,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,125,128,134,135,162,168,],[-53,-55,-57,65,-54,-53,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-59,-65,-61,-64,]),'CHHA':([13,16,19,21,27,67,76,80,93,94,95,96,97,98,99,101,102,103,104,105,106,108,134,135,162,168,],[-55,-57,-54,-53,-56,-58,-60,122,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-61,-64,]),'MODULUS':([11,13,16,18,19,21,22,24,25,27,67,76,80,82,85,89,90,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,125,128,129,132,134,135,139,146,149,162,163,165,168,170,178,],[-53,-55,-57,66,-54,-53,66,66,66,-56,-58,-60,66,66,66,-53,66,66,-46,-40,-49,-39,66,-43,66,-45,-44,-48,-47,-41,66,66,-59,-65,66,66,-59,-65,66,66,-58,-61,66,66,66,66,66,]),'RPARA':([13,16,19,21,22,25,27,36,67,69,70,76,78,86,93,94,95,96,97,98,99,101,102,103,104,105,106,108,110,111,117,118,134,135,141,160,162,168,],[-55,-57,-54,-53,-37,76,-56,-38,-58,-38,-38,-60,-35,128,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,135,-36,140,-34,-59,-65,-35,-33,-61,-64,]),'SAMMA':([10,],[30,]),'MA':([11,],[45,]),'SEMICOLON':([13,16,19,21,26,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,130,134,135,162,165,168,],[-55,-57,-54,-53,77,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,150,-59,-65,-61,171,-64,]),'PATHAU':([11,13,16,18,19,21,27,67,76,93,94,95,96,97,98,99,101,102,103,104,105,106,108,125,128,134,135,162,168,],[-53,-55,-57,63,-54,-53,-56,-58,-60,-52,-46,-40,-49,-39,-42,-43,-51,-45,-44,-48,-47,-41,-50,-59,-65,-59,-65,-61,-64,]),'DEKHAU':([11,],[46,]),'BAJA':([120,136,143,154,],[-73,-73,161,-72,]),'MAKA':([136,154,159,169,],[-73,-72,-73,174,]),'ATHAWA':([72,114,136,154,167,173,],[-73,138,-73,-72,-73,138,]),'LEU':([11,83,],[47,126,]),'BAISA':([136,154,172,176,180,181,],[-73,-72,-73,179,-73,182,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optelse':([114,173,],[137,177,]),'whilecond':([30,119,121,],[79,142,144,]),'sliceexp':([32,68,124,],[81,81,145,]),'incrementsign':([11,125,],[40,148,]),'sign':([11,125,171,],[44,44,175,]),'variableexp':([1,36,69,70,84,131,],[20,86,110,111,127,151,]),'dynamString':([0,9,45,49,57,72,107,120,136,156,159,167,172,180,],[4,4,88,4,100,4,4,4,4,4,4,4,4,4,]),'cmpdstmt':([72,107,120,136,156,159,167,172,180,],[114,133,143,154,166,169,173,176,181,]),'variableArgs':([78,141,],[117,160,]),'stmt':([0,9,49,72,107,120,136,156,159,167,172,180,],[14,14,14,113,113,113,113,113,113,113,113,113,]),'exp':([0,1,2,3,9,30,32,35,36,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,69,70,71,72,73,84,87,91,107,116,119,120,121,124,131,136,138,147,152,156,158,159,164,167,172,175,180,],[18,22,24,25,18,80,82,85,22,90,18,93,94,95,96,97,98,99,90,101,102,103,104,105,106,108,109,22,22,24,18,24,22,129,132,18,139,80,18,80,146,22,18,24,163,165,18,168,18,170,18,18,178,18,]),'element':([0,9,49,],[17,17,17,]),'N':([0,9,49,],[15,29,92,]),'condition':([2,71,73,138,],[23,112,115,157,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> N","S'",1,None,None,None),
  ('N -> element NEWLINE N','N',3,'p_N','D:\\rhee\\NepParser.py',17),
  ('N -> NEWLINE N','N',2,'p_N_newline','D:\\rhee\\NepParser.py',23),
  ('N -> element','N',1,'p_N_lastone','D:\\rhee\\NepParser.py',26),
  ('N -> <empty>','N',0,'p_N_empty','D:\\rhee\\NepParser.py',29),
  ('element -> stmt','element',1,'p_element_stmt','D:\\rhee\\NepParser.py',35),
  ('stmt -> IDENTIFIER ASSIGNMENT exp','stmt',3,'p_stmt_assign','D:\\rhee\\NepParser.py',39),
  ('stmt -> dynamString LEKHA','stmt',2,'p_stmt_withoutCommaNewline','D:\\rhee\\NepParser.py',48),
  ('stmt -> dynamString LEKHA SEMICOLON','stmt',3,'p_stmt_WOCommaSameline','D:\\rhee\\NepParser.py',56),
  ('stmt -> BAHIRA','stmt',1,'p_stmt_break','D:\\rhee\\NepParser.py',64),
  ('stmt -> ARKO','stmt',1,'p_stmt_continue','D:\\rhee\\NepParser.py',68),
  ('stmt -> IDENTIFIER MA dynamString LEKHA SEMICOLON','stmt',5,'p_stmt_filewritewithnewline','D:\\rhee\\NepParser.py',72),
  ('stmt -> IDENTIFIER MA dynamString LEKHA','stmt',4,'p_stmt_filewrite','D:\\rhee\\NepParser.py',76),
  ('stmt -> IDENTIFIER BATA IDENTIFIER LEU','stmt',4,'p_stmt_fileread','D:\\rhee\\NepParser.py',80),
  ('stmt -> IDENTIFIER BANDAGARA','stmt',2,'p_stmt_fileclose','D:\\rhee\\NepParser.py',84),
  ('stmt -> IDENTIFIER DEKHAU','stmt',2,'p_stmt_graphicshow','D:\\rhee\\NepParser.py',88),
  ('stmt -> IDENTIFIER HATAU','stmt',2,'p_stmt_graphichide','D:\\rhee\\NepParser.py',96),
  ('stmt -> IDENTIFIER BANAU','stmt',2,'p_stmt_graphicupdate','D:\\rhee\\NepParser.py',100),
  ('stmt -> IDENTIFIER METAU','stmt',2,'p_stmt_graphiclear','D:\\rhee\\NepParser.py',104),
  ('stmt -> IDENTIFIER MA IDENTIFIER KORA variableexp','stmt',5,'p_stmt_graphicdraw','D:\\rhee\\NepParser.py',109),
  ('stmt -> IDENTIFIER LEU','stmt',2,'p_stmt_input','D:\\rhee\\NepParser.py',114),
  ('stmt -> IDENTIFIER incrementsign ASSIGNMENT exp','stmt',4,'p_stmt_increment','D:\\rhee\\NepParser.py',118),
  ('stmt -> IDENTIFIER LGPARA exp RGPARA incrementsign ASSIGNMENT exp','stmt',7,'p_stmt_incrementarray','D:\\rhee\\NepParser.py',122),
  ('stmt -> YEDI condition NEWLINE cmpdstmt optelse DIYE','stmt',6,'p_stmt_ifcondition','D:\\rhee\\NepParser.py',126),
  ('stmt -> SABEI IDENTIFIER ASSIGNMENT exp DEKHI exp SEMICOLON sign exp NEWLINE cmpdstmt BAISA','stmt',12,'p_stmt_for','D:\\rhee\\NepParser.py',130),
  ('stmt -> exp CHOTI NEWLINE cmpdstmt TICHO','stmt',5,'p_stmt_choti','D:\\rhee\\NepParser.py',134),
  ('stmt -> SABEI IDENTIFIER ASSIGNMENT exp DEKHI exp NEWLINE cmpdstmt BAISA','stmt',9,'p_stmt_for1','D:\\rhee\\NepParser.py',139),
  ('stmt -> JABA SAMMA whilecond NEWLINE cmpdstmt BAJA','stmt',6,'p_stmt_while','D:\\rhee\\NepParser.py',143),
  ('stmt -> IDENTIFIER ASSIGNMENT LGPARA variableexp RGPARA','stmt',5,'p_stmt_list','D:\\rhee\\NepParser.py',147),
  ('stmt -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE cmpdstmt MAKA','stmt',8,'p_stmt_function','D:\\rhee\\NepParser.py',151),
  ('stmt -> IDENTIFIER LPARA variableexp RPARA','stmt',4,'p_stmt_functionCall','D:\\rhee\\NepParser.py',155),
  ('stmt -> exp PATHAU','stmt',2,'p_stmt_returnStatement','D:\\rhee\\NepParser.py',159),
  ('stmt -> IDENTIFIER LGPARA exp RGPARA ASSIGNMENT exp','stmt',6,'p_stmt_listitemassignment','D:\\rhee\\NepParser.py',163),
  ('variableArgs -> IDENTIFIER COMMA variableArgs','variableArgs',3,'p_variableArgs_arguments','D:\\rhee\\NepParser.py',167),
  ('variableArgs -> IDENTIFIER','variableArgs',1,'p_variableArgs_single','D:\\rhee\\NepParser.py',170),
  ('variableArgs -> <empty>','variableArgs',0,'p_variableArgs_empty','D:\\rhee\\NepParser.py',173),
  ('variableexp -> exp COMMA variableexp','variableexp',3,'p_variableexp_more','D:\\rhee\\NepParser.py',177),
  ('variableexp -> exp','variableexp',1,'p_variableexp_one','D:\\rhee\\NepParser.py',180),
  ('variableexp -> <empty>','variableexp',0,'p_variableexp_empty','D:\\rhee\\NepParser.py',183),
  ('exp -> exp EQ exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',189),
  ('exp -> exp LE exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',190),
  ('exp -> exp GE exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',191),
  ('exp -> exp NE exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',192),
  ('exp -> exp LT exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',193),
  ('exp -> exp GT exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',194),
  ('exp -> exp PLUS exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',195),
  ('exp -> exp MINUS exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',196),
  ('exp -> exp TIMES exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',197),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',198),
  ('exp -> exp POWER exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',199),
  ('exp -> exp MODULUS exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',200),
  ('exp -> exp RA exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',201),
  ('exp -> exp WA exp','exp',3,'p_exp_equal','D:\\rhee\\NepParser.py',202),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','D:\\rhee\\NepParser.py',207),
  ('exp -> STRING','exp',1,'p_exp_string','D:\\rhee\\NepParser.py',210),
  ('exp -> NUMBER','exp',1,'p_exp_number','D:\\rhee\\NepParser.py',213),
  ('exp -> MINUS NUMBER','exp',2,'p_exp_minus','D:\\rhee\\NepParser.py',217),
  ('exp -> SUNYA','exp',1,'p_exp_sunya','D:\\rhee\\NepParser.py',221),
  ('exp -> LGPARA variableexp RGPARA','exp',3,'p_exp_list','D:\\rhee\\NepParser.py',224),
  ('exp -> IDENTIFIER LGPARA exp RGPARA','exp',4,'p_exp_listitem','D:\\rhee\\NepParser.py',227),
  ('exp -> LPARA exp RPARA','exp',3,'p_exp_paren','D:\\rhee\\NepParser.py',230),
  ('exp -> IDENTIFIER LGPARA sliceexp COLON sliceexp RGPARA','exp',6,'p_exp_slicing','D:\\rhee\\NepParser.py',234),
  ('sliceexp -> exp','sliceexp',1,'p_sliceexp_var','D:\\rhee\\NepParser.py',237),
  ('sliceexp -> <empty>','sliceexp',0,'p_sliceexp_empty','D:\\rhee\\NepParser.py',240),
  ('exp -> LPARA exp RPARA QUESTION exp COLON exp','exp',7,'p_exp_conditional','D:\\rhee\\NepParser.py',244),
  ('exp -> IDENTIFIER LPARA variableexp RPARA','exp',4,'p_exp_functionCall','D:\\rhee\\NepParser.py',248),
  ('dynamString -> exp COMMA dynamString','dynamString',3,'p_dynamString_ident','D:\\rhee\\NepParser.py',252),
  ('dynamString -> exp','dynamString',1,'p_dynamString_exp','D:\\rhee\\NepParser.py',255),
  ('condition -> condition RA condition','condition',3,'p_condition_binop','D:\\rhee\\NepParser.py',259),
  ('condition -> condition WA condition','condition',3,'p_condition_binop','D:\\rhee\\NepParser.py',260),
  ('condition -> exp BHAE','condition',2,'p_condition_positive','D:\\rhee\\NepParser.py',265),
  ('condition -> exp NABHAE','condition',2,'p_condition_neg','D:\\rhee\\NepParser.py',269),
  ('cmpdstmt -> stmt NEWLINE cmpdstmt','cmpdstmt',3,'p_cmpdstmt_stmt','D:\\rhee\\NepParser.py',273),
  ('cmpdstmt -> <empty>','cmpdstmt',0,'p_cmpdstmt_empty','D:\\rhee\\NepParser.py',276),
  ('optelse -> ATHAWA condition NEWLINE cmpdstmt optelse','optelse',5,'p_optelse_elseif','D:\\rhee\\NepParser.py',280),
  ('optelse -> ATHAWA NEWLINE cmpdstmt','optelse',3,'p_optelse_else','D:\\rhee\\NepParser.py',283),
  ('optelse -> <empty>','optelse',0,'p_optelse_empty','D:\\rhee\\NepParser.py',286),
  ('sign -> PLUS','sign',1,'p_sign','D:\\rhee\\NepParser.py',294),
  ('sign -> MINUS','sign',1,'p_sign','D:\\rhee\\NepParser.py',295),
  ('incrementsign -> sign','incrementsign',1,'p_incrementsign','D:\\rhee\\NepParser.py',299),
  ('incrementsign -> TIMES','incrementsign',1,'p_incrementsign','D:\\rhee\\NepParser.py',300),
  ('incrementsign -> DIVIDE','incrementsign',1,'p_incrementsign','D:\\rhee\\NepParser.py',301),
  ('whilecond -> whilecond RA whilecond','whilecond',3,'p_whilecond_normal','D:\\rhee\\NepParser.py',308),
  ('whilecond -> whilecond WA whilecond','whilecond',3,'p_whilecond_normal','D:\\rhee\\NepParser.py',309),
  ('whilecond -> exp CHHA','whilecond',2,'p_whilecond_pos','D:\\rhee\\NepParser.py',314),
  ('whilecond -> exp CHHAINA','whilecond',2,'p_whilecond_neg','D:\\rhee\\NepParser.py',317),
]
